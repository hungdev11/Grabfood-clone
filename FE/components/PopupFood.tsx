"use client";
import React, { useState, useEffect } from "react";
import { Food } from "@/components/types/Types";
import { Button } from "@/components/ui/button";
import PickAdditionalFood from "@/components/PickAdditionalFood";
import { useCart } from "@/app/context/CartContext";
import { fetchWithAuth } from "@/utils/api";
import { useRouter } from "next/navigation";
import { toast } from "@/components/ui/use-toast";

interface PopupProps {
  selectedFood: Food;
  isVisible: boolean;
  onClose: () => void;
  restaurantId: string;
  userId: number;
}

async function getAdditionalFood(
  foodId: number,
  restaurantId: string
): Promise<Food[]> {
  const res = await fetch(
    `http://localhost:6969/grab/foods/additional/${foodId}?restaurantId=${restaurantId}&isForCustomer=true&page=0&pageSize=20`,
    { cache: "no-store" }
  );

  if (!res.ok) {
    throw new Error(`Failed to fetch: ${res.status} ${res.statusText}`);
  }

  const data = await res.json();
  return data?.data?.items || [];
}

async function addToCart(userId: number, requestData: any) {
  const res = await fetchWithAuth(`http://localhost:6969/grab/cart/add?userId=${userId}`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(requestData),
  });

  if (!res.ok) throw new Error("Failed to add to cart");
}

async function updateWholeCartItem(
  userId: number,
  cartDetailId: number,
  foodId: number,
  quantity: number,
  additionFoodIds: number[],
  note: string
) {
  const requestData = {
    userId,
    cartDetailId,
    foodId,
    newQuantity: quantity,
    additionFoodIds: additionFoodIds,
    note,
  };

  console.log("üõ† Updating whole cart item with data:", requestData); // üëà Log ki·ªÉm tra

  const res = await fetchWithAuth("http://localhost:6969/grab/cart/update", {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(requestData),
  });

  if (!res.ok) {
    const errText = await res.text();
    console.error("‚ùå Update failed:", errText); // üëà Th√™m log n·∫øu l·ªói
    throw new Error("Failed to update cart");
  } else {
    console.log("‚úÖ Update success");
  }
}


const Popup: React.FC<PopupProps> = ({
  selectedFood,
  isVisible,
  onClose,
  restaurantId,
  userId,
}) => {
  const [quantity, setQuantity] = useState(1);
  const [additionalFoods, setAdditionalFoods] = useState<Food[]>([]);
  const [selectedItems, setSelectedItems] = useState<{ [key: number]: number }>({});
  const [specialInstructions, setSpecialInstructions] = useState("");
  const { fetchCartItems, isAuthenticated, restaurantCartId } = useCart();
  const router = useRouter();

  useEffect(() => {
    const fetchAdditionalFoods = async () => {
      try {
        const foods = await getAdditionalFood(selectedFood.id, restaurantId);
        setAdditionalFoods(foods);

        if (selectedFood.additionalFoods?.length) {
          const selectedMap: { [key: number]: number } = {};
          selectedFood.additionalFoods.forEach((item) => {
            const matched = foods.find((f) => f.id === item.id);
            if (matched) selectedMap[matched.id] = matched.price;
          });
          setSelectedItems(selectedMap);
        } else {
          setSelectedItems({});
        }
      } catch (error) {
        console.error("‚ùå Failed to load additional food:", error);
      }
    };

    if (selectedFood && restaurantId) fetchAdditionalFoods();
  }, [selectedFood, restaurantId]);

  useEffect(() => {
    if (selectedFood) {
      setQuantity(typeof selectedFood.quantity === "number" ? selectedFood.quantity : 1);
      setSpecialInstructions(selectedFood.note || "");
    }
  }, [selectedFood]);

  if (!isVisible || !selectedFood) return null;

  const increase = () => setQuantity((prev) => prev + 1);
  const decrease = () => setQuantity((prev) => Math.max(prev - 1, 0));

  const handleCheckboxChange = (foodId: number, price: number) => {
    setSelectedItems((prev) => {
      const updated = { ...prev };
      if (updated[foodId]) {
        delete updated[foodId];
      } else {
        updated[foodId] = price;
      }
      return updated;
    });
  };

  const totalAdditionalPrice = Object.values(selectedItems).reduce((sum, price) => sum + price, 0);
  const basePrice = typeof selectedFood.discountPrice === "number" && selectedFood.discountPrice < selectedFood.price
  ? selectedFood.discountPrice
  : selectedFood.price;

  const totalPrice = (basePrice + totalAdditionalPrice) * quantity;

  const handleSubmitToCart = async () => {
    if (!isAuthenticated) {
      toast?.({
        title: "Login Required",
        description: "Please login to add items to your basket",
        variant: "destructive",
      });
      onClose();
      router.push("/login");
      return;
    }

    const additionalIds = Object.keys(selectedItems).map(Number);

    try {
      if (selectedFood.cartDetailId) {
        await updateWholeCartItem(userId, selectedFood.cartDetailId, selectedFood.id, quantity, additionalIds, specialInstructions);
        toast?.({
          title: "C·∫≠p nh·∫≠t th√†nh c√¥ng",
          description: `${selectedFood.name} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t`,
        });
      } else {
        if (restaurantCartId && Number(restaurantCartId) !== Number(restaurantId)) {
          const confirmAdd = window.confirm(
            "B·∫°n kh√¥ng th·ªÉ th√™m m√≥n t·ª´ nhi·ªÅu nh√† h√†ng c√πng l√∫c. N·∫øu mu·ªën ti·∫øp t·ª•c, ch·ªçn OK v√† d·ªØ li·ªáu trong gi·ªè s·∫Ω ƒë∆∞·ª£c b·ªã x√≥a v√† kh√¥ng th·ªÉ kh√¥i ph·ª•c."
          );
        
          if (!confirmAdd) {
            return; // Ng∆∞·ªùi d√πng kh√¥ng ƒë·ªìng √Ω => Kh√¥ng l√†m g√¨ c·∫£
          }
        }
        
        // ƒê·ªìng √Ω ho·∫∑c c√πng nh√† h√†ng th√¨ addToCart b√¨nh th∆∞·ªùng
        const requestData = {
          foodId: selectedFood.id,
          quantity,
          additionalItems: additionalIds,
          note: specialInstructions,
        };
        
        await addToCart(userId, requestData);
        
        toast?.({
          title: "Th√™m th√†nh c√¥ng",
          description: `${quantity} √ó ${selectedFood.name} ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè`,
        });        
      }

      await fetchCartItems();
      onClose();
    } catch (error) {
      toast?.({
        title: "L·ªói",
        description: "Kh√¥ng th·ªÉ x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i.",
        variant: "destructive",
      });
    }
  };

  return (
    <div
      className="fixed top-0 right-0 h-full w-96 bg-white shadow-lg z-50 flex flex-col transition-transform duration-300"
      style={{ transform: isVisible ? "translateX(0)" : "translateX(100%)" }}
    >
      <div className="flex justify-left mt-4 mb-4">
        <button onClick={onClose} className="text-4xl font-bold text-gray-700 hover:text-red-500">
          √ó
        </button>
      </div>

      <div className="flex items-center justify-between mb-4 p-4">
        <img src={selectedFood.image || "/placeholder.svg"} alt={selectedFood.name} className="w-24 h-24 object-cover rounded-md mr-4" />
        <div className="flex-1 mx-4">
          <h2 className="text-2xl font-bold text-left">{selectedFood.name}</h2>
          <p className="text-xl font-bold mt-2 text-left">
          {typeof selectedFood.discountPrice === "number" && selectedFood.discountPrice < selectedFood.price ? (
            <>
              <span className="line-through text-gray-500 mr-2">
                {selectedFood.price.toLocaleString()}ƒë
              </span>
              <span className="text-red-500">
                {selectedFood.discountPrice.toLocaleString()}ƒë
              </span>
            </>
          ) : (
            <span>{selectedFood.price.toLocaleString()}ƒë</span>
          )}
        </p>
        </div>
      </div>

      <div className="flex-1 overflow-y-auto p-4 border-t border-gray-300 my-4">
        <PickAdditionalFood
          additionalFoods={additionalFoods}
          onCheckboxChange={handleCheckboxChange}
          onSpecialInstructionsChange={setSpecialInstructions}
          selectedItems={selectedItems}
          specialInstructions={specialInstructions}
        />
      </div>

      <div className="p-4 border-t border-gray-200 bg-white">
        <div className="flex items-center justify-between gap-4">
          <div className="flex items-center gap-2">
            <button onClick={decrease} className="w-10 h-10 rounded-full border text-xl font-bold hover:bg-gray-100">‚àí</button>
            <span className="text-xl font-semibold w-8 text-center">{quantity}</span>
            <button onClick={increase} className="w-10 h-10 rounded-full border text-xl font-bold hover:bg-gray-100">+</button>
          </div>

          <Button
            variant={quantity <= 0 ? "destructive" : "success"}
            size="lg"
            onClick={() => {
              if (quantity <= 0) {
                onClose();
              } else {
                handleSubmitToCart();
              }
            }}
            className={`flex-1 whitespace-nowrap ${quantity <= 0 ? "bg-red-600 text-white" : ""}`}
          >
            {quantity <= 0
              ? "Cancel"
              : !isAuthenticated
              ? `Login to add ‚Äì ${totalPrice.toLocaleString()}ƒë`
              : selectedFood.cartDetailId
              ? `Update ‚Äì ${totalPrice.toLocaleString()}ƒë`
              : `Add to basket ‚Äì ${totalPrice.toLocaleString()}ƒë`}
          </Button>
        </div>
      </div>
    </div>
  );
};

export default Popup;
